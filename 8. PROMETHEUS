PROMETHEUS:

Prometheus is free and open-source monitoring tool that is especially well-suited for cloud-native environments, like Kubernetes. 
which is used to Monitor our Servers and whch is collects the data in Time-Series Based format
and whener the cpu utilization,memory utilizxation is increased it is going to send a mail to PagerDuty and
which is going to a email to support engineer.
#Support Eng going to do trouble-shootof it.
#PromQl is Prometheus Query Language which is used to get the metrix of a server.
It can monitor the performance of your applications and services.
it will sends an alert you if there are any issues. 
It has a powerful query language that allows you to analyze the data.
 It pulls the real-time metrics, compresses and stores  in a time-series database.
Prometheus is a standalone system, but it can also be used in conjunction with other tools like Alertmanager to send alerts based on the data it collects.
it can be integration with tools like PagerDuty to send alerts to the appropriate on-call personnel.
 it collects, and it also has a rich set of integrations with other tools and systems.
For example, you can use Prometheus to monitor the health of your Kubernetes cluster, and use its integration with Grafana to visualize the data it collects.

COMPONENTS OF PROMETHEUS:
Prometheus is a monitoring system that consists of the following components:

NODE-EXPORTER: NODE-EXPORTER is a component which is takes the Data from Main Server and executes the queries.

WHY NODE-EXPORTER: 
1.Prometheus will monitor the servers and which is collects the Data only.
2.The Data is available in Prometheus database and we have to export the data for this reason we are using componet called Node-Exporter.

A main server that scrapes and stores time series data
A query language called PromQL is used to retrieve and analyze the data
A set of exporters that are used to collect metrics from various systems and applications
A set of alerting rules that can trigger notifications based on the data
An alert manager that handles the routing and suppression of alerts

GRAFANA:
Grafana is an open-source data visualization and monitoring platform that allows you to create dashboards to visualize your data and metrics. 
It is a popular choice for visualizing time series data, and it integrates with a wide range of data sources, including Prometheus, Elasticsearch, and InfluxDB.
A user-friendly interface that allows you to create and customize dashboards with panels that display your data in a variety of formats, including graphs, gauges, and tables. You can also use Grafana to set up alerts that trigger notifications when certain conditions are met.
Grafana has a rich ecosystem of plugins and integrations that extend its functionality. For example, you can use Grafana to integrate with other tools and services, such as Slack or PagerDuty, to receive alerts and notifications.
 Grafana is a powerful tool for visualizing and monitoring your data and metrics, and it is widely used in a variety of industries and contexts.

CONNECTION:
SETUP BOTH PROMETHEUS & GRAFAN FROM BELOW LINK
https://github.com/RAHAMSHAIK007/all-setups.git

pROMETHERUS: 9090
NODE EXPORTER: 9100
GRAFANA: 3000

CONNECTING PROMETHEUS TO GARAFANA:
connect to grafana dashboard -- > Data source -- > add -- > promethus -- > url of prometheus -- > save & test -- > 
-->top of page -- > explore data-->-- >if you want run some queries -- > top -- > click on plus (+) symbol--> 
-->click on import dashboard -- > 1860 (default code for monitr Linux Server)-- >-->click on laod --- >
-->in prometheus select prometheus-- > import-->save dashbord-->To open saved dashboard goto leftside corner 3dots -->
-->click on Dashboard-->click on Name "Node Exporter Full" -->done its open

amazon-linux-extras install epel -y
yum install strees -y



LOKI INTEGRATION:
Grafana with integration of Loki and Promtail:

apt install docker.io -y

wget https://raw.githubusercontent.com/grafana/loki/v2.8.0/cmd/loki/loki-local-config.yaml -O loki-config.yaml
wget https://raw.githubusercontent.com/grafana/loki/v2.8.0/clients/cmd/promtail/promtail-docker-config.yaml -O promtail-config.yaml
docker run --name loki -d -v $(pwd):/mnt/config -p 3100:3100 grafana/loki:2.8.0 -config.file=/mnt/config/loki-config.yaml
docker run --name promtail -d -v $(pwd):/mnt/config -v /var/log:/var/log --link loki grafana/promtail:2.8.0 -config.file=/mnt/config/promtail-config.yaml



Data Source in Grafana:
Add data source -- > loki  -- > url: http://13.233.139.224:3100 -- > save & tets

Checking logs in Loki:
Explore -- > Label filters -- > jobs=varlogs -- > run query
