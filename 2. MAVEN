MAVEN: 
Maven is a build/project management tool using which manage the dependencies for the code.
Build: adding dependencies to code.
dependencies: packages req to run the code.
maven is used to manage dependencies for the code.

HISTORY:
company: apache software Foundations.
year: 2004
language: java-1.8.0
kind: free and opensource

ARTIFACTS:
it is the final product of a source code.
code -- > build & test -- > artifact

.jar = compile java -- > .class -- > .jar = backend
.war = frontend + backend code
.ear = 

POM.XML: contains info about the project and dependencies of code.
target: artifacts will store on this folder. 

INSTALLATION:
yum install java-1.8.0-openjdk maven git -y
git --version 
mvn --version

git clone https://github.com/devopsbyraham/jenkins-java-project.git
cd jenkins-java-project.git



MAVEN GOALS:
it is a command which is used to execute tasks.
1. mvn compile: to compile the code
2. mvn test: to test the code
3. mvn package: to create war/jar file
4. mvn install: to copy the war file to local repo (.m2 folder)
5. mvn deploy: to generate the war file
6. mvn clean: to delte the artifacts

mvn clean package: used to generate the war file.


BUILD TOOLS:
c: make file
.net: visual code
java: maven, ant, gradle
python: gradle

MAVEN VS ANT:

maven is procedural, ant is declarative.
maven: pom.xml, ant: build.xml
maven: lifecycle, ant: not have a lifecycle
maven: plugins (reusable), ant: scripts (not reusable)


plugins: is a small piece software we can use without installing tool.

HISTORY:

  1  yum install java-1.8.0-openjdk maven git -y
    2  git --version
    3  mvn --version
    4  git clone https://github.com/devopsbyraham/jenkins-java-project.git
    5  ll
    6  cd  jenkins-java-project/
    7  ll'
    8  ll
    9  yum install tree -y
   10  tree
   11  mvn compile
   12  ll
   13  tree
   14  mvn test
   15  tree
   16  mvn package
   17  tree
   18  mvn install
   19  cd /root/.m2/repository/in/javahome/myweb/8.3.2-SNAPSHOT/
   20  ll
   21  cd -
   22  mvn deploy
   23  ll
   24  mvn clean
   25  mvn clean package
   26  ll
   27  tree
   28  cat pom.xml
   29  history
